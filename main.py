from aiogram import Bot, Dispatcher, executor
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from configs import *
from keyboars import generate_languages
from googletrans import Translator
import sqlite3

storage = MemoryStorage()
bot = Bot(token=TOKEN, parse_mode='HTML')
dp = Dispatcher(bot, storage=storage)


class GetLanguages(StatesGroup):
    src = State()
    dest = State()
    text = State()


@dp.message_handler(commands=['start', 'help', 'sponsor'])
async def command_start(message: Message):
    if message.text == '/start':
        await message.answer(f'''<b>–ó–¥—Ä–∞–≤—Å—Ç—É–π—Ç–µ</b> <i>{message.from_user.full_name}</i>!üôã‚Äç‚ôÇÔ∏è


<b>–Ø –±–æ—Ç –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!</b>üßê''')
        await get_first_language(message)
    elif message.text == '/help':
        await message.answer(
            '''<b>–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫—à–µ–º –ø—Ä–æ–±–ª–µ–º–µ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫</b> <tg-spoiler>@sadnesshistoryinelif</tg-spoiler>''')
    elif message.text == '/sponsor':
        await message.answer(f'''<b>–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏–ª–∏ –ø–æ–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º—É
–¢–æ –º–æ–∂–∏—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫</b> <tg-spoiler>@sadnesshistoryinelif</tg-spoiler>''')


async def get_first_language(message: Message):
    await GetLanguages.src.set()
    await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</b> üåç: ', reply_markup=generate_languages())


@dp.message_handler(content_types=['text'], state=GetLanguages.src)
async def get_second_language(message: Message, state: FSMContext):
    if message.text in ['/start', '/help', '/sponsor']:
        await command_start(message)
    else:
        async with state.proxy() as data:
            data['src'] = message.text

        await GetLanguages.next()
        await message.answer('<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏</b> üîç: ',
                             reply_markup=generate_languages())


@dp.message_handler(content_types=['text'], state=GetLanguages.dest)
async def get_text(message: Message, state: FSMContext):
    if message.text in ['/start', '/help', '/sponsor']:
        await command_start(message)
    else:
        async with state.proxy() as data:
            data['dest'] = message.text
        await GetLanguages.next()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏', reply_markup=ReplyKeyboardRemove())


@dp.message_handler(content_types=['text'], state=GetLanguages.text)
async def translate_function(message: Message, state: FSMContext):
    if message.text in ['/start', '/help', '/sponsor']:
        await command_start(message)
    else:
        async with state.proxy() as data:
            data['text'] = message.text
        #         await message.answer(f'''–Ø–∑—ã–∫ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ: {data['src']}
        # –ù–∞ –∫–æ—Ç–æ—Ä—ã–π {data['dest']}
        # –¢–µ–∫—Å—Ç: {data['text']}''')
        danil = Translator()
        src = get_key(data['src'])
        dest = get_key(data['dest'])

        result = danil.translate(text=data['text'],
                                 src=src,
                                 dest=dest).text
        await message.answer(result)
        await state.finish()
        database = sqlite3.connect('bot.db')
        cursor = database.cursor()

        cursor.execute('''
        INSERT INTO translate(telegram_id, src, dest, original_text, translated_text)
        VALUES (?,?,?,?,?)
        ''', (message.chat.id, src, dest, message.text, result))
        database.commit()
        database.close()

        await get_first_language(message)


executor.start_polling(dp)
